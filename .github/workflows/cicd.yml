# No es necesario reiniciar NGINX
name: Deploy Node Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source # Clona el repositorio actual en el runner
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Delete ECR image tagged with latest (if exists)
        run: |
          echo "Deleting image tagged as ${{ vars.IMAGE_TAG }}..."
          aws ecr batch-delete-image --repository-name ${{ vars.ECR_REPOSITORY }} --image-ids imageTag=${{ vars.IMAGE_TAG }} --region ${{ vars.AWS_DEFAULT_REGION }} || true

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }} .
          docker tag ${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }} 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}

      - name: Push Docker Image to ECR
        run: |
          docker push 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # NOTA: si no te conectas al usuario de IAM no se van a poder obtener los secretos del secrets manager para 
      # pasarselos al contenedor de docker para iniciar el backend
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Get runner ip address # Saber la direcciÃ³n ip del runner
        id: ip
        uses: haythem/public-ip@v1.3
      
      - name: Print Public IP of the runner
        run: |
            echo ${{ steps.ip.outputs.ipv4 }}

      - name: Add runner IP address to security group whitelist
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ vars.AWS_SEG_ID_BACKEND_DEV }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com
            
            echo "Fetching secrets from AWS Secrets Manager..."
            aws secretsmanager get-secret-value \
              --secret-id ${{ vars.AWS_SECRETS_MANAGER }} \
              --query SecretString \
              --output text | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > .env.production

            echo "Stopping old container..."
            docker stop mi-backend-dev || true
            
            echo "Deleting old container..."
            docker rm mi-backend-dev || true

            echo "Deleting old image..."
            docker rmi 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }} || true

            echo "Pulling new image..."
            docker pull 390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}

            echo "Running new container..."
            docker run -d -p \
              3001:3001 \
              --name mi-backend-dev \
              --env-file .env.production \
              390844762416.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}
            
            echo "Cleaning up .env.production"
            rm .env.production

      - name: Remove runner IP address from security group whitelist
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ vars.AWS_SEG_ID_BACKEND_DEV }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
            